#!/bin/bash
set -x

# setup vars
export TERM=xterm-color
export KUBECONFIG=/opt/kubeconfig

# save them to the profile
echo "export TERM=xterm-color" >> /root/.bashrc
echo "export KUBECONFIG=/opt/kubeconfig" >> /root/.bashrc
echo "export HOME=/root" >> /root/.bashrc

ENS4IP=$(ip -4 -o addr show ens4 | awk '{print $4}' | cut -d "/" -f 1)

# set hostname
INSTRUQT_HOSTNAME=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/hostname)

# Don't do this below causes issues later on, i believe.
# hostnamectl set-hostname $HOSTNAME

eval $(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/startup-script | grep INSTRUQT_PARTICIPANT_ID)

PULLSECRET="eyJhdXRocyI6eyJjbG91ZC5vcGVuc2hpZnQuY29tIjp7ImF1dGgiOiJiM0JsYm5Ob2FXWjBMWEpsYkdWaGMyVXRaR1YySzJKbGJtOWpaV3h2ZEhWd2NtOWhjbU52YlRGeWVYUndjamwyYVcxc2VHcDJiR1JpTjNka2JEUnhZMnBpY0RwSk0weFNRVUU0VTBoVVNGUXpVbGhCVnpOSVZFaFNRVkZSUjBFMU5rNUZVVlZPUVZGSFNEZElPVnBCVGs5UFdUSktTbFJPVHpOV1FVaEZSMGRHTkRkTSIsImVtYWlsIjoiYmVuQG9jZWxvdHVwcm9hci5jb20ifSwicXVheS5pbyI6eyJhdXRoIjoiYjNCbGJuTm9hV1owTFhKbGJHVmhjMlV0WkdWMksySmxibTlqWld4dmRIVndjbTloY21OdmJURnllWFJ3Y2psMmFXMXNlR3AyYkdSaU4zZGtiRFJ4WTJwaWNEcEpNMHhTUVVFNFUwaFVTRlF6VWxoQlZ6TklWRWhTUVZGUlIwRTFOazVGVVZWT1FWRkhTRGRJT1ZwQlRrOVBXVEpLU2xST1R6TldRVWhGUjBkR05EZE0iLCJlbWFpbCI6ImJlbkBvY2Vsb3R1cHJvYXIuY29tIn0sInJlZ2lzdHJ5LmNvbm5lY3QucmVkaGF0LmNvbSI6eyJhdXRoIjoiTlRJNE9UUTBOekI4ZFdoakxURlNXVlJRY2psMlNVMU1XRXBXVEVSQ04xZEVURFJ4WTJwQ2NEcGxlVXBvWWtkamFVOXBTbE5WZWxWNFRXbEtPUzVsZVVwNlpGZEphVTlwU210UFIwWnNUVlJzYWxreVNtdE9WRUV3VGxkTmVsbHRVVEJhYlZwcldsUktiVnBFVlRKT1JFbDVUV2xLT1M1d1lrTjNXVXBoVFZSZlRXazRSVzlzYlRaM016RTFXbWd5VUVaWGREQTBiMVl6YlZkWFF6SlFUbmhoVkVWa1VuWkxORmhWV1dRdFNWaHdWMVZhVDJONlIwUTVNbEZCVVUwMmExQXphekZpZVhSRGVqZEVVVXRRWm10TWNsRndlbGg2ZEROa2J6TTFPRTR6Vmtob01tVlZSMVJ3Vkc1WExWVjNVVzVtU2pCRk4zRXRiM1JOZVRaQlpGZ3hhbVJQUkRWbGRuVjNYMnBDYjNSbk1sbE1VQzFETjNSU1pHdFlkekZXUjNOSE0zZHlOMkkxVjJsb1VEUnlkRlZaUjJoTFQxbDNVRTF5V0d0UWFGUlNaRXN0WVVGeGRtTXpNa1ZrVlZaVU9HOUdYMWhLUzFkVmFYRnVjMVZLWjBwaWRFUllWRTUyU1d0TmIxTmhVVFJyUW0xNlVGUlVNVEpWY2pWdk5GRlRWa1ZCU1ZOamN6ZERhVVZUT1doUWFtNXljVUpZVXpKbFpXRlNRbFZOWkRaeFMwNU9OR2xqWm1oTFRUbHpWbko0ZVhSRlJYWTBjbTVTUW1Wa00xTTBaV2xoVkdObVgxcEdTblYxZURrNFJVMVhjWFZEUTNJNGFHMWZPRWRtY0ZKUVNXNHlZVlp2Y2w5RVNrZDJNbEJZV2kwdFpIZFZhVE5uY0hjNVFrUlFRemhRUVhWS1pWRTRXa1J5WkVvMFdYVmhNRWxLYUdwNk5HdE1ZM0ZwWTNOVU1ITm1jVTVJZGw5cWR6aENVbXBhZDFZdE4yRkpkM0EyVGxnd1VXSlNhWFJ2WW5ORGNtaEtYMVZRVUd4TVZYTjNOekp4VTNCNFVFUlRVMjVOUmpsdVRIUlJPVEEyUlhCTWFtdEZhMDVUTkhJeFJEZDVVa2RwVFVzeGEySTRXalJRZGtOelpUVnJaV3hmZEhOSmNVMTBhRGRIWDFoT1oxUlVlR3hmZVVGcllYVk9NMHB4TUY5WVlUQTBWVzF6ZVZwaFJVZFVSVnBmVjNoQkxXdFFaMDFKV2tvNFZIRkhVRU5zT0dJd0xYQkZWR0pIZEhJdGJWbERWSFkxYTBaMVVtMWlRVjlxWkVrNFlUTjRVVzFIVXpCVFZ6aHdMVVpmVUVOSFMyaHZTWGcyU21SbVRUVnNTbVZaVG1seGVIUnJVV3hXTFhWemNreG5WV05TZFRaTlgzSmZSMWd4VlE9PSIsImVtYWlsIjoiYmVuQG9jZWxvdHVwcm9hci5jb20ifSwicmVnaXN0cnkucmVkaGF0LmlvIjp7ImF1dGgiOiJOVEk0T1RRME56QjhkV2hqTFRGU1dWUlFjamwyU1UxTVdFcFdURVJDTjFkRVREUnhZMnBDY0RwbGVVcG9Za2RqYVU5cFNsTlZlbFY0VFdsS09TNWxlVXA2WkZkSmFVOXBTbXRQUjBac1RWUnNhbGt5U210T1ZFRXdUbGROZWxsdFVUQmFiVnByV2xSS2JWcEVWVEpPUkVsNVRXbEtPUzV3WWtOM1dVcGhUVlJmVFdrNFJXOXNiVFozTXpFMVdtZ3lVRVpYZERBMGIxWXpiVmRYUXpKUVRuaGhWRVZrVW5aTE5GaFZXV1F0U1Zod1YxVmFUMk42UjBRNU1sRkJVVTAyYTFBemF6RmllWFJEZWpkRVVVdFFabXRNY2xGd2VsaDZkRE5rYnpNMU9FNHpWa2hvTW1WVlIxUndWRzVYTFZWM1VXNW1TakJGTjNFdGIzUk5lVFpCWkZneGFtUlBSRFZsZG5WM1gycENiM1JuTWxsTVVDMUROM1JTWkd0WWR6RldSM05ITTNkeU4ySTFWMmxvVURSeWRGVlpSMmhMVDFsM1VFMXlXR3RRYUZSU1pFc3RZVUZ4ZG1Nek1rVmtWVlpVT0c5R1gxaEtTMWRWYVhGdWMxVktaMHBpZEVSWVZFNTJTV3ROYjFOaFVUUnJRbTE2VUZSVU1USlZjalZ2TkZGVFZrVkJTVk5qY3pkRGFVVlRPV2hRYW01eWNVSllVekpsWldGU1FsVk5aRFp4UzA1T05HbGpabWhMVFRselZuSjRlWFJGUlhZMGNtNVNRbVZrTTFNMFpXbGhWR05tWDFwR1NuVjFlRGs0UlUxWGNYVkRRM0k0YUcxZk9FZG1jRkpRU1c0eVlWWnZjbDlFU2tkMk1sQllXaTB0WkhkVmFUTm5jSGM1UWtSUVF6aFFRWFZLWlZFNFdrUnlaRW8wV1hWaE1FbEthR3A2Tkd0TVkzRnBZM05VTUhObWNVNUlkbDlxZHpoQ1VtcGFkMVl0TjJGSmQzQTJUbGd3VVdKU2FYUnZZbk5EY21oS1gxVlFVR3hNVlhOM056SnhVM0I0VUVSVFUyNU5Samx1VEhSUk9UQTJSWEJNYW10RmEwNVROSEl4UkRkNVVrZHBUVXN4YTJJNFdqUlFka056WlRWclpXeGZkSE5KY1UxMGFEZEhYMWhPWjFSVWVHeGZlVUZyWVhWT00wcHhNRjlZWVRBMFZXMXplVnBoUlVkVVJWcGZWM2hCTFd0UVowMUpXa280VkhGSFVFTnNPR0l3TFhCRlZHSkhkSEl0YlZsRFZIWTFhMFoxVW0xaVFWOXFaRWs0WVRONFVXMUhVekJUVnpod0xVWmZVRU5IUzJodlNYZzJTbVJtVFRWc1NtVlpUbWx4ZUhSclVXeFdMWFZ6Y2t4blZXTlNkVFpOWDNKZlIxZ3hWUT09IiwiZW1haWwiOiJiZW5Ab2NlbG90dXByb2FyLmNvbSJ9fX0K"

# dnsmasq config for crc-dnsmasq.service
cat << EOF > /var/srv/dnsmasq.conf
user=root
port= 53
bind-interfaces
expand-hosts
log-queries
local=/crc.testing/
domain=crc.testing
address=/apps-crc.testing/$ENS4IP
address=/api.crc.testing/$ENS4IP
address=/api-int.crc.testing/$ENS4IP
address=/crc-dzk9v-master-0.crc.testing/192.168.126.11
EOF

# configure local resolver
sed -i '/^search.*/a nameserver 10.88.0.8' /etc/resolv.conf

# Set kubelet config.json
echo "$PULLSECRET" | base64 -d | tee /var/lib/kubelet/config.json

# start openshift
systemctl start crc-dnsmasq.service
systemctl start kubelet

# INGRESS

# Check for cert expiration
CLIENT_CERT="/var/lib/kubelet/pki/kubelet-client-current.pem"
CLIENT_SIGNER_NAME="kubernetes.io/kube-apiserver-client-kubelet"
EXPIRE=$(date --date="$(sudo openssl x509 -in $CLIENT_CERT -noout -enddate | cut -d= -f 2)" --iso-8601=seconds)
NOW=$(date --iso-8601=seconds)

if [[ "$NOW" > "$EXPIRE" ]]
then
  echo "Kubelet certificates have expired; expect kubelet to renew... [will take up to 8 minutes.]"
  # https://github.com/code-ready/crc/blob/1ddff4b80fdda77f10087574666d27a142eeab42/pkg/crc/cluster/cert-renewal.go
  # Kubelet will automatically request a new client, when it shows up as pending an admin must approve.
  # wait for pending CSR

  #wait for csr's to approve

  csr_approvals=$(oc get csr 2>/dev/null | grep $CLIENT_SIGNER_NAME | grep Pending)
  while [ "${csr_approvals}" == "" ]
  do
    sleep 5
    csr_approvals=$(oc get csr 2>/dev/null | grep $CLIENT_SIGNER_NAME | grep Pending)
  done

  oc delete csr system:openshift:openshift-authenticator
  sleep 5
  echo "Approve Pending certs"
  oc get csr -oname | xargs oc adm certificate approve

  echo "Waiting for Server cert..."
  # Server CSR doesn't require approval, but will take a little longer to show up in
  # our csr list. Giving it 60 seconds.
  sleep 60
  oc get csr -oname | xargs oc adm certificate approve
fi

# place yaml
cat << EOF > /tmp/pull-secret.yaml
apiVersion: v1
data:
  .dockerconfigjson: $PULLSECRET
kind: Secret
metadata:
  name: pull-secret
  namespace: openshift-config
type: kubernetes.io/dockerconfigjson
EOF

# setup the pull secret for the cluster
until oc replace -f /tmp/pull-secret.yaml 2>/dev/null 1>&2; do echo "Resetting pull secret. This fails when the apiserver is not ready."; sleep 5; done

rm /tmp/pull-secret.yaml
# OpenShift should start to be avilable at this point. `oc get co`, wait till all are true to be sure!
# probably optional? more stable though.


# admin/admin, @Maybe fixing the TODO above (wait for oc get co == true ...) this will actually work?
cat << EOF > /tmp/pass.htpasswd
admin:\$2y\$05\$Sokv3so/TbycwilNeV6L6.lMIYT0ClbaW/RsPssFIBY.BWanJyMwe
developer:\$apr1\$PFGWfRKw\$DbBab3TIlvsZGmHjVbehv0
EOF

cat << EOF > /tmp/oauth-admin.yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: admin_htpasswd_provider
    mappingMethod: claim
    type: HTPasswd
    htpasswd:
      fileData:
        name: htpass-secret-admin
EOF

until oc create secret generic htpass-secret-admin --from-file=htpasswd=/tmp/pass.htpasswd -n openshift-config 2>/dev/null 1>&2; do echo "Add admin secret. This fails when the apiserver is not ready."; sleep 5; done
until oc apply -f /tmp/oauth-admin.yaml 2>/dev/null 1>&2; do echo "Adding admin user. This fails when the apiserver is not ready."; sleep 5; done
until oc adm policy add-cluster-role-to-user cluster-admin admin 2>/dev/null 1>&2; do echo "Config admin policy. This fails when the apiserver is not ready."; sleep 5; done

until oc adm policy add-cluster-role-to-user cluster-admin admin 2>/dev/null 1>&2; do echo "Config admin policy. This fails when the apiserver is not ready."; sleep 5; done

rm /tmp/oauth-admin.yaml /tmp/pass.htpasswd

# INGRESS

# check if ingresses.config.openshift.io cluster is present
oc patch -p '{"spec": {"domain": "'$HOSTNAME'.crc.'$INSTRUQT_PARTICIPANT_ID'.instruqt.io"}}' ingresses.config.openshift.io cluster --type=merge

oc delete -n openshift-ingress-operator ingresscontroller/default

cat <<EOF | oc apply -n openshift-ingress-operator -f -
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  name: default
  namespace: openshift-ingress-operator
spec:
  replicas: 1
  domain: $HOSTNAME.crc.$INSTRUQT_PARTICIPANT_ID.instruqt.io
EOF

oc rollout status deploy/oauth-openshift -n openshift-authentication

oc rollout status deploy/apiserver -n openshift-apiserver


until oc get routes -A 2>/dev/null 1>&2; do echo "Changing routes, waiting for cluster operators..."; sleep 5; done


oc patch -p '{"spec": {"host": "console-openshift-console.'$HOSTNAME'.crc.'$INSTRUQT_PARTICIPANT_ID'.instruqt.io"}}' route console -n openshift-console --type=merge

oc patch -p '{"spec": {"host": "downloads-openshift-console.'$HOSTNAME'.crc.'$INSTRUQT_PARTICIPANT_ID'.instruqt.io"}}' route downloads -n openshift-console --type=merge

oc patch -p '{"spec": {"host": "default-route-openshift-image-registry.'$HOSTNAME'.crc.'$INSTRUQT_PARTICIPANT_ID'.instruqt.io"}}' route default-route -n openshift-image-registry --type=merge


# wait until cluster operators are "available"
# for co in $(oc get co -oname)
# do
#     # skip this one
#     if [ $co == "clusteroperator.config.openshift.io/machine-config" -o $co == "clusteroperator.config.openshift.ioopenshift-controller-manager" ]
#     then
#       continue
#     fi
#     
#     echo -n "Waiting for $co ..."
#     co_available=$(oc get $co 2>/dev/null | awk -v col=AVAILABLE 'NR==1{for(i=1;i<=NF;i++){if($i==col){c=i;break}} print $c} NR>1{print $c}' | grep True)
# 
#     while [ "${co_available}" == "" ]
#     do
#       sleep 5
#       echo -n "."
#       co_available=$(oc get $co 2>/dev/null | awk -v col=AVAILABLE 'NR==1{for(i=1;i<=NF;i++){if($i==col){c=i;break}} print $c} NR>1{print $c}' | grep True)
#     done
#     echo "AVAILABLE"
# done

# Download Go with global assets script
# curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/scripts/install_go.sh | bash
# 
# # Download dep
# curl -s https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
# 
# # Download Operator SDK
# export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
# export OS=$(uname | awk '{print tolower($0)}')
# export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v1.8.0
# 
# 
# curl -sL ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH} -o /usr/local/bin/operator-sdk
# chmod +x /usr/local/bin/operator-sdk
# 
# 
# # Download local assets
# 
# curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/go-operator-podset/scripts/podset_types.go -o /tmp/podset_types.go 
# curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/go-operator-podset/scripts/podset_controller.go -o /tmp/podset_types.go
# curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/go-operator-podset/scripts/app_v1alpha1_podset.yaml -o /tmp/app_v1alpha1_podset.yaml

sudo --preserve-env podman pull --authfile /var/lib/kubelet/config.json "registry.redhat.io/rhel8/support-tools:latest"

 
sudo podman run \
    --hostname toolbox \
    --name toolbox-root \
    --privileged \
    --net=host \
    --pid=host \
    --ipc=host \
    --tty \
    --interactive \
    -e HOST=/host \
    -e NAME=toolbox-root \
    -e IMAGE="rhel8/support-tools" \
    --security-opt label=disable \
    --volume /run:/run \
    --volume /var/log:/var/log \
    --volume /etc/machine-id:/etc/machine-id \
    --volume /etc/localtime:/etc/localtime \
    --volume /:/host \
    "registry.redhat.io/rhel8/support-tools:latest" \
    dnf install -y make automake gcc gcc-c++ &&  curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/scripts/install_operatorsdk_toolbox.sh -o /tmp/install.sh && bash /tmp/install.sh && curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/go-operator-podset/scripts/podset_types.go -o /tmp/podset_types.go  && curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/go-operator-podset/scripts/podset_types.go -o /tmp/podset_types.go && curl -s https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/go-operator-podset/scripts/app_v1alpha1_podset.yaml -o /tmp/app_v1alpha1_podset.yaml

#echo "toolbox" >> /root/.bashrc

