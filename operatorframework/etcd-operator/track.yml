slug: operatorframework-etcd-operator
id: wt4etvcedo9u
type: track
title: Etcd Operator
description: |
  The etcd operator manages etcd clusters deployed to Kubernetes and automates tasks related to operating an etcd cluster.

  - [Create and Destroy](https://github.com/coreos/etcd-operator#create-and-destroy-an-etcd-cluster)
  - [Resize](https://github.com/coreos/etcd-operator#resize-an-etcd-cluster)
  - [Failover](https://github.com/coreos/etcd-operator#failover)
  - [Rolling upgrade](https://github.com/coreos/etcd-operator#upgrade-an-etcd-cluster)
  - [Backup and Restore](https://github.com/coreos/etcd-operator#backup-and-restore-an-etcd-cluster)

  There are [more spec examples](https://github.com/coreos/etcd-operator/blob/master/doc/user/spec_examples.md) on setting up clusters with different configurations

  Read [Best Practices](https://github.com/coreos/etcd-operator/blob/master/doc/best_practices.md) for more information on how to better use etcd operator.

  Read [RBAC docs](https://github.com/coreos/etcd-operator/blob/master/doc/user/rbac.md) for how to setup RBAC rules for etcd operator if RBAC is in place.

  Read [Developer Guide](https://github.com/coreos/etcd-operator/blob/master/doc/dev/developer_guide.md) for setting up a development environment if you want to contribute.

  See the [Resources and Labels](https://github.com/coreos/etcd-operator/blob/master/doc/user/resource_labels.md) doc for an overview of the resources created by the etcd-operator.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: step1
  id: d9s2gxxn9mc3
  type: challenge
  title: Creating the Custom Resource Definition (CRD)
  notes:
  - type: text
    contents: |
      The etcd operator manages etcd clusters deployed to Kubernetes and automates tasks related to operating an etcd cluster.

      - [Create and Destroy](https://github.com/coreos/etcd-operator#create-and-destroy-an-etcd-cluster)
      - [Resize](https://github.com/coreos/etcd-operator#resize-an-etcd-cluster)
      - [Failover](https://github.com/coreos/etcd-operator#failover)
      - [Rolling upgrade](https://github.com/coreos/etcd-operator#upgrade-an-etcd-cluster)
      - [Backup and Restore](https://github.com/coreos/etcd-operator#backup-and-restore-an-etcd-cluster)

      There are [more spec examples](https://github.com/coreos/etcd-operator/blob/master/doc/user/spec_examples.md) on setting up clusters with different configurations

      Read [Best Practices](https://github.com/coreos/etcd-operator/blob/master/doc/best_practices.md) for more information on how to better use etcd operator.

      Read [RBAC docs](https://github.com/coreos/etcd-operator/blob/master/doc/user/rbac.md) for how to setup RBAC rules for etcd operator if RBAC is in place.

      Read [Developer Guide](https://github.com/coreos/etcd-operator/blob/master/doc/dev/developer_guide.md) for setting up a development environment if you want to contribute.

      See the [Resources and Labels](https://github.com/coreos/etcd-operator/blob/master/doc/user/resource_labels.md) doc for an overview of the resources created by the etcd-operator.
  assignment: |
    Let's begin by creating a new project called `myproject`:

    ```
    cd /root && \
    oc new-project myproject
    ```

    Create the Custom Resource Definition (CRD) for the Etcd Operator:

    ```
    cat > etcd-operator-crd.yaml<<EOF
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: etcdclusters.etcd.database.coreos.com
    spec:
      group: etcd.database.coreos.com
      names:
        kind: EtcdCluster
        listKind: EtcdClusterList
        plural: etcdclusters
        shortNames:
        - etcdclus
        - etcd
        singular: etcdcluster
      scope: Namespaced
      version: v1beta2
      versions:
      - name: v1beta2
        schema:
          openAPIV3Schema:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        served: true
        storage: true
    EOF
    ```

    ```
    oc create -f etcd-operator-crd.yaml
    ```

    Verify the CRD was successfully created.

    ```
    oc get crd etcdclusters.etcd.database.coreos.com
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: step2
  id: zcxgpe6gyrqx
  type: challenge
  title: Creating the Service Account, Role, and RoleBinding
  assignment: |-
    Create a dedicated Service Account responsible for running the Etcd Operator:

    ```
    cd /root && \
    cat > etcd-operator-sa.yaml<<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: etcd-operator-sa
    EOF
    ```

    ```
    oc create -f etcd-operator-sa.yaml
    ```

    Verify the Service Account was successfully created:

    ```
    oc get sa
    ```

    Create the Role that the `etcd-operator-sa` Service Account will need for authorization to perform actions against the Kubernetes API:

    ```
    cat > etcd-operator-role.yaml<<EOF
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: etcd-operator-role
    rules:
    - apiGroups:
      - etcd.database.coreos.com
      resources:
      - etcdclusters
      - etcdbackups
      - etcdrestores
      verbs:
      - '*'
    - apiGroups:
      - ""
      resources:
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - events
      verbs:
      - '*'
    - apiGroups:
      - apps
      resources:
      - deployments
      verbs:
      - '*'
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - get
    EOF
    ```

    ```
    oc create -f etcd-operator-role.yaml
    ```

    Verify the Role was successfully created:

    ```
    oc get roles
    ```

    Create the RoleBinding to bind the `etcd-operator-role` Role to the `etcd-operator-sa` Service Account:

    ```
    cat > etcd-operator-rolebinding.yaml<<EOF
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: etcd-operator-rolebinding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: etcd-operator-role
    subjects:
    - kind: ServiceAccount
      name: etcd-operator-sa
      namespace: myproject
    EOF
    ```

    ```
    oc create -f etcd-operator-rolebinding.yaml
    ```

    Verify the RoleBinding was successfully created:

    ```
    oc get rolebindings
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: step3
  id: qyykecaxyt2g
  type: challenge
  title: Creating the Etcd Operator Deployment
  assignment: |
    Create the Deployment containing the Etcd Operator container image:

    ```
    cd /root && \
    cat > etcd-operator-deployment.yaml<<EOF
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        name: etcdoperator
      name: etcd-operator
    spec:
      replicas: 1
      selector:
        matchLabels:
          name: etcd-operator
      template:
        metadata:
          labels:
            name: etcd-operator
        spec:
          containers:
          - command:
            - etcd-operator
            - --create-crd=false
            env:
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            image: quay.io/coreos/etcd-operator@sha256:c0301e4686c3ed4206e370b42de5a3bd2229b9fb4906cf85f3f30650424abec2
            imagePullPolicy: IfNotPresent
            name: etcd-operator
          serviceAccountName: etcd-operator-sa
    EOF
    ```

    ```
    oc create -f etcd-operator-deployment.yaml
    ```

    Verify the Etcd Operator Deployment was successfully created:

    ```
    oc get deploy
    ```

    Verify the Etcd Operator Deployment pods are running:

    ```
    oc get pods
    ```

    From *Terminal 2* follow Etcd Operator logs in real-time:

    ```
    export ETCD_OPERATOR_POD=$(oc get pods -l name=etcd-operator -o jsonpath='{.items[0].metadata.name}')
    oc logs $ETCD_OPERATOR_POD -f
    ```

    Observe the leader-election lease on the Etcd Operator Endpoint:

    ```
    oc get endpoints etcd-operator -o yaml
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Terminal 2
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: step4
  id: y8vkazhypisq
  type: challenge
  title: Creating the EtcdCluster Custom Resource (CR)
  assignment: |
    Ensure you are currently scoped to the `myproject` Namespace:

    ```
    cd /root && \
      oc project myproject
    ```

    Create an Etcd cluster by referring to the new Custom Resource, `EtcdCluster`, defined in the Custom Resource Definition on Step 1:

    ```
    cat > etcd-operator-cr.yaml<<EOF
    apiVersion: etcd.database.coreos.com/v1beta2
    kind: EtcdCluster
    metadata:
      name: example-etcd-cluster
    spec:
      size: 3
      version: 3.1.10
    EOF
    ```

    ```
    oc create -f etcd-operator-cr.yaml
    ```

    Patch the just created resource:

    ```
    oc patch service example-etcd-cluster --type='json' -p '[{"op": "replace", "path": "/spec/publishNotReadyAddresses", "value":true}]'
    ```

    Verify the cluster object was created:

    ```
    oc get etcdclusters
    ```

    Watch the pods in the Etcd cluster get created:

    ```
    oc get pods -l etcd_cluster=example-etcd-cluster -w
    ```

    Verify the cluster has been exposed via a ClusterIP service:

    ```
    oc get services -l etcd_cluster=example-etcd-cluster
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: step5
  id: jakpxnovlnui
  type: challenge
  title: Interacting with a Live Etcd Cluster
  assignment: |
    Let's now create another pod and attempt to connect to the etcd cluster via `etcdctl`:

    ```
    oc run etcdclient --image=busybox busybox --restart=Never -- /usr/bin/tail -f /dev/null
    ```

    Checking if etcdclient is running: 

    ```
    oc get pods
    ```

    Access the pod:

    ```
    oc rsh etcdclient
    ```


    Install the Etcd Client:

    ```
    wget https://github.com/coreos/etcd/releases/download/v3.1.4/etcd-v3.1.4-linux-amd64.tar.gz
    tar -xvf etcd-v3.1.4-linux-amd64.tar.gz
    cp etcd-v3.1.4-linux-amd64/etcdctl .
    ```

    Set the etcd version and endpoint variables:

    ```
    export ETCDCTL_API=3
    export ETCDCTL_ENDPOINTS=example-etcd-cluster-client:2379
    ```

    Attempt to write a key/value into the Etcd cluster:

    ```
    ./etcdctl put operator sdk
    ```
    ```
    ./etcdctl get operator
    ```

    Exit out of the client pod:

    ```
    exit
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: step6
  id: ujwnpiy5yoxe
  type: challenge
  title: Scaling and Modifying the Etcd Version
  assignment: |
    Let's change the size of the Etcd `example-etcd-cluster` CR. The Etcd Operator pod will detect the CR `spec.size` change and modify the number of pods in the cluster:

    ```
    oc patch etcdcluster example-etcd-cluster --type='json' -p '[{"op": "replace", "path": "/spec/size", "value":5}]'
    ```


    Let's change the version of our `example-etcd-cluster` CR. The etcd-operator pod will detect the CR `spec.version` change and create a new cluster with the newly specified image:

    ```
    oc patch etcdcluster example-etcd-cluster --type='json' -p '[{"op": "replace", "path": "/spec/version", "value":3.2.13}]'
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: step7
  id: kvs8dfokc5zh
  type: challenge
  title: Disaster Recovery in Action
  assignment: |

    Go to Terminal Container tab and run the following command.
    
    ```
    oc get pods -l app=etcd -w
    ```
    
    Once the command is running, delete a pod from the cluster on Terminal 1 and watch recovery in real-time on Terminal Container.

    ```
    export EXAMPLE_ETCD_CLUSTER_POD=$(oc get pods -l app=etcd -o jsonpath='{.items[0].metadata.name}')
    oc delete pod $EXAMPLE_ETCD_CLUSTER_POD
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Terminal Container
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: step8
  id: ain1vmrvjr6s
  type: challenge
  title: Clean Up
  assignment: |
    Delete your Etcd cluster:

    ```
    oc delete etcdcluster example-etcd-cluster
    ```

    Delete the Etcd Operator:

    ```
    oc delete deployment etcd-operator
    ```

    Delete the Etcd CRD:

    ```
    oc delete crd etcdclusters.etcd.database.coreos.com
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
checksum: "18074853379496034420"
